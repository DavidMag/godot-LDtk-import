tool
extends EditorImportPlugin


enum Presets { PRESET_DEFAULT, PRESET_COLLISIONS }
var LDtk = preload("LDtk.gd").new()


func get_importer_name():
	return "LDtk.import"


func get_visible_name():
	return "LDtk Scene"


func get_priority():
	return 1


func get_import_order():
	return 100


func get_resource_type():
	return "PackedScene"


func get_recognized_extensions():
	return ["ldtk"]


func get_save_extension():
	return "tscn"


func get_preset_count():
	return Presets.size()


func get_preset_name(preset):
	match preset:
		Presets.PRESET_DEFAULT:
			return "Default"
		Presets.PRESET_COLLISIONS:
			return "Import Collisions"

func get_import_options(preset):
	return [
		{
			"name": "Scene_Save_Path",
			"default_value": "res://src/ldtk"
		},
		{
			"name": "Import_Collisions",
			"default_value": preset == Presets.PRESET_COLLISIONS
		},
		{
			"name": "Import_Custom_Entities",
			"default_value": true,
			"hint_string": "If true, will only use this project's scenes. If false, will import objects as simple scenes."
		},
		{
			"name": "Import_Metadata",
			"default_value": true,
			"hint_string": "If true, will import entity fields as metadata."
		},
		{
			"name": "Import_YSort_Entities_Layer",
			"default_value": false
		}
	]

func get_option_visibility(option, options):
	return true

func import(source_file, save_path, options, platform_v, r_gen_files):
	#prepare level directory
	create_level_directory(options.Scene_Save_Path)
	
	#load LDtk map
	LDtk.map_data = source_file

	#add levels as Node2D
	for level in LDtk.map_data.levels:
		var new_scene: PackedScene = PackedScene.new()
		var new_level = get_level_scene("%s/%s-%s.%s" % [options.Scene_Save_Path, source_file.get_file().get_basename(), level.identifier, get_save_extension()])
		var generated_content: Node2D = new_level.get_node("AutoGenerated")
		
		new_level.name = level.identifier
		new_level.room_size = Vector2(level.pxWid, level.pxHei)
		
		#clear old generated nodes
		for n in generated_content.get_children():
			generated_content.remove_child(n)
		
		#add layers
		var layerInstances = get_level_layerInstances(level, options)
		for layerInstance in layerInstances:
			generated_content.add_child(layerInstance)
			layerInstance.set_owner(new_level)
			
			for child in layerInstance.get_children():
				child.set_owner(new_level)
				
				if not options.Import_Custom_Entities:
					for grandchild in child.get_children():
						grandchild.set_owner(new_level)
		
		new_scene.pack(new_level)
		ResourceSaver.save("%s/%s-%s.%s" % [options.Scene_Save_Path, source_file.get_file().get_basename(), level.identifier, get_save_extension()], new_scene)
	
	#pack and save level scene
	var map = get_main_scene("%s/%s-%s.%s" % [options.Scene_Save_Path, source_file.get_file().get_basename(), "main", get_save_extension()])
	map.name = source_file.get_file().get_basename()
	map.get_node("RoomLoader").base_path = "%s/%s-" % [options.Scene_Save_Path, source_file.get_file().get_basename()]
	map.get_node("RoomLoader").save_extension = ".%s" % [get_save_extension()]
	
	var packed_scene = PackedScene.new()
	packed_scene.pack(map)

	return ResourceSaver.save("%s/%s-%s.%s" % [options.Scene_Save_Path, source_file.get_file().get_basename(), "main", get_save_extension()], packed_scene)


#create layers in level
func get_level_layerInstances(level, options):
	var layers = []
	var i = level.layerInstances.size()
	for layerInstance in level.layerInstances:
		match layerInstance.__type:
			'Entities':
				var new_node = null
				if options.Import_YSort_Entities_Layer and layerInstance.__identifier.begins_with("YSort"):
					new_node = YSort.new()
				else:
					new_node = Node2D.new()
				new_node.z_index = i
				new_node.name = layerInstance.__identifier
				var entities = LDtk.get_layer_entities(layerInstance, level, options)
				for entity in entities:
					new_node.add_child(entity)

				layers.push_front(new_node)
			'Tiles', 'IntGrid', 'AutoLayer':
				var new_layer = LDtk.new_tilemap(layerInstance, level)
				if new_layer:
					new_layer.z_index = i
					layers.push_front(new_layer)

		if layerInstance.__type == 'IntGrid':
			var collision_layer = LDtk.import_collisions(layerInstance, level, options)
			if collision_layer:
				collision_layer.z_index = i
				layers.push_front(collision_layer)

		i -= 1

	return layers

#checks if the specified level directory exists and creates directories if needed
func create_level_directory(path):
	var dir = Directory.new()
	
	if not dir.dir_exists(path):
		dir.make_dir_recursive(path)

#returns the scene for the provided path, if there is none a new will be instantiated
func get_level_scene(path) -> Level:
	var dir = Directory.new()
	
	if ResourceLoader.exists(path):
		return ResourceLoader.load(path).instance()
	else:
		return ResourceLoader.load("res://addons/LDtk-Importer/Scenes/Level.tscn").instance()

# Get the path to the main scene, if none is found it is created
func get_main_scene(path):
	var dir = Directory.new()
	
	if ResourceLoader.exists(path):
		return ResourceLoader.load(path).instance()
	else:
		return ResourceLoader.load("res://addons/LDtk-Importer/Scenes/Main.tscn").instance()
